<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qianfengg.github.io</id>
    <title>梅利奥猪猪の窝</title>
    <updated>2020-03-31T14:31:58.219Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qianfengg.github.io"/>
    <link rel="self" href="https://qianfengg.github.io/atom.xml"/>
    <subtitle>for my dream</subtitle>
    <logo>https://qianfengg.github.io/images/avatar.png</logo>
    <icon>https://qianfengg.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 梅利奥猪猪の窝</rights>
    <entry>
        <title type="html"><![CDATA[来数页面元素啦]]></title>
        <id>https://qianfengg.github.io/post/lai-shu-ye-mian-yuan-su-la/</id>
        <link href="https://qianfengg.github.io/post/lai-shu-ye-mian-yuan-su-la/">
        </link>
        <updated>2020-03-31T14:30:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言尬聊">前言尬聊</h2>
<p>距离上一次写的文章间隔已经有段时间了，没想到随手的一次笔记分享，还拿到了几个赞(原本以为应该是没人看没阅读量的)，谢谢大家的鼓励，所以就有动力肝这一篇文章了。其实作为萌新，感觉提高自己的方式就是坚持学习，持续的学习，多写写技术相关的文章，萌新都是潜力股啊，因为撒都不会，学到了什么温故了什么记录了什么就是一次成长！所以今天记录的题目就是如标题，好了我成长了，那就撤了，大家自己脑补下面试题吧！88！(被众人一顿狂揍，好好好，我回来，来讲正题了)</p>
<h2 id="考题">考题</h2>
<p>正如标题所说的这样，这次的面试题分享，就是数页面元素，考察的点依然是基础，先上题目</p>
<ol>
<li>掘金首页一共有多少元素，共有几种不同的元素</li>
<li>掘金首页出现次数最多的top3的元素是什么</li>
</ol>
<h2 id="解题">解题</h2>
<h3 id="第一题-热身用">第一题 - 热身用</h3>
<p>一个页面一共有多少元素，想必这个初学者都会，我们不是有个通配符<code>*</code>嘛，配合我们的<code>querySelectorAll</code>，在掘金首页打开开发者工具，随手一敲，飒！</p>
<figure data-type="image" tabindex="1"><img src="https://qianfengg.github.io/post-images/1585665056459.jpg" alt="" loading="lazy"></figure>
<p>众所周知，NodeList并不是数组，里面的每个Node都是个对象，为了拿到标签名，我们可以使用map，但这里直接map就会报错哦~</p>
<figure data-type="image" tabindex="2"><img src="https://qianfengg.github.io/post-images/1585665071093.jpg" alt="" loading="lazy"></figure>
<p>那之后的数组去重，不用说大家都会，直接用Set就可以了！</p>
<figure data-type="image" tabindex="3"><img src="https://qianfengg.github.io/post-images/1585665078935.jpg" alt="" loading="lazy"></figure>
<p>上图所示答案不就出来了，原来掘金一共用了24种元素，当然面试官考到这个一共有多少种，我们还是要规范点，在前面的代码上加上<code>.length</code>，这样第一题就大功告成！哈哈是不是道很基础的题，虽然很简单，但还是考察了一些知识点的，下一道top3的题就更有意思了，但其实也不难，听我娓娓道来~</p>
<h3 id="第二题">第二题</h3>
<p>还记得我们前面的<code>[...document.querySelectorAll(&quot;*&quot;)].map(item =&gt; item.tagName)</code>获取了页面所有元素的标签名嘛，在此基础上做个统计而已，这个时候我们的reduce就登场了</p>
<figure data-type="image" tabindex="4"><img src="https://qianfengg.github.io/post-images/1585665088054.jpg" alt="" loading="lazy"></figure>
<p>我们统计好了，但如何方便的排序呢，好像给对象排序不是特别方便吧，肯定转成数组会方便些吧，sort下美滋滋啊，所以我们这个时候又可以借助<code>Object.entries</code></p>
<figure data-type="image" tabindex="5"><img src="https://qianfengg.github.io/post-images/1585665095825.jpg" alt="" loading="lazy"></figure>
<p>之后sort，map，slice一顿操作猛如虎，就完成第二题了</p>
<figure data-type="image" tabindex="6"><img src="https://qianfengg.github.io/post-images/1585665108212.jpg" alt="" loading="lazy"></figure>
<p>果然和猜的差不多啊，<code>div</code>, <code>li</code>, <code>a</code>必然是前三啊~</p>
<h2 id="总结">总结</h2>
<p>虽然这次题目很基础，但涉及到的知识点，一些api不算多也不算少，不清楚的萌新可以查缺补漏，我也会和诸位萌新共同成长<sub>当然如果有更方便的解题思路，大家可以一起讨论哈，这里是梅利奥猪猪，谢谢大家支持鼓励</sub></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字节跳动一面的第一道基础题]]></title>
        <id>https://qianfengg.github.io/post/zi-jie-tiao-dong-yi-mian-de-di-yi-dao-ji-chu-ti/</id>
        <link href="https://qianfengg.github.io/post/zi-jie-tiao-dong-yi-mian-de-di-yi-dao-ji-chu-ti/">
        </link>
        <updated>2020-03-31T12:25:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景概述">背景概述</h2>
<p>大家好，我是梅丽奥猪猪，本人属于萌新前端一枚，写的不好请大家多多关照哈，前一阵子有幸接到了字节跳动的面试邀请，还是很开心的，还是那句话，基础最重要，虽然我二面已经挂了，但还是想分享一下关于基础的一些比较有意思的题目~</p>
<h2 id="题目">题目</h2>
<p>第一轮面试还是比较轻松的，面试官一开始就说一面还是比较简单基础的，让我放轻松，很nice，大多数面试应该一开始都是聊技术(如果聊的不是很好，估计也到不了下面的直播写代码吧)，然后字节跳动之后就是牛客网直播写代码了，只见面试官悠悠的写下了这么2行代码，并让我实现它</p>
<pre><code class="language-js">let a = new Foo() //a.id -&gt; 1
let b = new Foo() //b.id -&gt; 2
</code></pre>
<h2 id="解答过程">解答过程</h2>
<h3 id="使用全局变量">使用全局变量</h3>
<p>作为萌新的我，看到这个，这么简单，随手一写~</p>
<pre><code class="language-js">let idIndex = 1;
function Foo () {
  this.id = idIndex++;
}
let a = new Foo();
console.log(a);
let b = new Foo();
console.log(b);
</code></pre>
<p>很明显实现了效果，对于萌新来说也特别好理解，每次实例化对象的时候，把全局属性后加加，完美达到了面试官的要求，只见面试官悠悠的说，嗯可以，但能不能不用全局变量。。。</p>
<h3 id="使用静态属性">使用静态属性</h3>
<p>这有什么难的，飒！直接把全局改成静态的就行了~</p>
<pre><code class="language-js">function Foo () {
  this.id = Foo.idIndex++;
}
Foo.idIndex = 1
let a = new Foo();
console.log(a);
let b = new Foo();
console.log(b);
</code></pre>
<p>面试官一看眉头一皱，这小子还是没有写出我想要的代码啊，&quot;额，能不能不用全局，和静态属性实现这个效果呢&quot;，此时的我也就只能想出，还有闭包的方式，&quot;那用闭包？&quot;，面试官表示那你就show下吧</p>
<h3 id="使用闭包">使用闭包</h3>
<p>这个对于萌新的我依然还是很简单的，老子写代码就是一把梭</p>
<pre><code class="language-js">const Foo = (function(){
  let idIndex = 1;
  return function(){
    this.id = idIndex++;
  }
})()
let a = new Foo();
console.log(a);
let b = new Foo();
console.log(b);
</code></pre>
<p>唰唰唰几下就写完了，面试官就点了点头，嗯看来还是比较满意我的写法吧，&quot;可以，那我们在加深点题目难度吧，原本的题目改成这样&quot;</p>
<pre><code class="language-js">let a = Foo() //a.id -&gt; 1
let b = new Foo() //b.id -&gt; 2
let c = new Foo() //c.id -&gt; 3
let d = Foo() //d.id -&gt; 4
</code></pre>
<h3 id="使用instance-of救场">使用instance of救场</h3>
<p>讲道理一开始是把我卡住一会的，主要是要处理这个this的问题，但面试官还是很友善的提示了一句话，如何判断一个方法是直接调用还是使用new调用，有没有用过instanceof，哈哈好在我反应快一下子就写出了代码，当然当中也有这么一段代码调试了下</p>
<pre><code class="language-js">const Foo = (function(){
  let idIndex = 1;
  return function(){
    // this.id = idIndex++;
    console.log(this instanceof Foo)
  }
})()
let a = new Foo();
// console.log(a);
let b = Foo();
// console.log(b);
let c = Foo();
// console.log(c);
let d = new Foo();
// console.log(d);
</code></pre>
<p>上述代码很明显，打印出来的结果就是<code>true</code>，<code>false</code>，<code>false</code>，<code>true</code>，因为就第一个和最后个使用了new，属于Foo的实例，接着就是根据这个来做判断处理，首先大家其实还要对new要有一定的理解，new会改变this指向，指向实例化的实例，并且会在最后方法执行完，把实例return出去，如果不使用new直接调用函数，函数没有返回值默认返回undefined，知道这些就可以干这个题了</p>
<pre><code class="language-js">const Foo = (function(){
  let idIndex = 1;
  return function(){
    // console.log(this instanceof Foo)
    if (this instanceof Foo) {
      // 使用了new 会自动返回对象~
      this.id = idIndex++;
    } else {
      // 没有使用new，我们帮它返回~
      return {
        id: idIndex++
      }
    }
  }
})()
let a = new Foo();
console.log(a); // {id: 1}
let b = Foo();
console.log(b); // {id: 2}
let c = Foo();
console.log(c); // {id: 3}
let d = new Foo();
console.log(d); // {id: 4}
</code></pre>
<p>这样就完成了第一道笔试题~</p>
<h2 id="总结">总结</h2>
<p>总体来说，第一道题还是比较轻松愉悦的，后面的题目后续我也会慢慢分享，其实一面的题目大多数还是比较基础的，最难的可能就是让你手写个Promise，以及实现Promise的一些静态方法，一面的面试官对我还是比较满意的，于是还增加了自信，然后就被第二轮面试血虐了，这里是萌新前端开发，记录自己的面试经历，以及空了分享一些知识，希望能与大家共同成长，如有错误，希望大佬轻喷，并且能指导前行<sub>谢谢大家支持</sub></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[玩耍JS树状结构数据]]></title>
        <id>https://qianfengg.github.io/post/wan-shua-js-shu-zhuang-jie-gou-shu-ju/</id>
        <link href="https://qianfengg.github.io/post/wan-shua-js-shu-zhuang-jie-gou-shu-ju/">
        </link>
        <updated>2020-03-07T08:36:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="題目">題目</h2>
<h3 id="概述">概述</h3>
<ul>
<li>这边的数据，就拿我们当年的童年，war3举例子</li>
<li>本人之前一直玩的是兽族，四个英雄，各列举了点技能，满级10级，小技能等级上限3级</li>
<li>然后就愉快的做题吧</li>
</ul>
<h3 id="练习">练习</h3>
<ul>
<li>
<p>先来看下数据格式</p>
<pre><code class="language-js">let list = [
    {
        id: 0,
        name: &quot;兽族英雄技能&quot;,
        pid: -1
    },
    {
        id: 1,
        name: &quot;剑圣&quot;,
        pid: 0
    },
    {
        id: 2,
        name: &quot;牛头人酋长&quot;,
        pid: 0
    },
    {
        id: 3,
        name: &quot;先知&quot;,
        pid: 0
    },
    {
        id: 4,
        name: &quot;巫医&quot;,
        pid: 0
    },
    {
        id: 5,
        name: &quot;疾风步&quot;,
        pid: 1
    },
    {
        id: 6,
        name: &quot;分身&quot;,
        pid: 1
    },
    {
        id: 7,
        name: &quot;致命一击&quot;,
        pid: 1
    },
    {
        id: 8,
        name: &quot;剑刃风暴&quot;,
        pid: 1
    },
    {
        id: 9,
        name: &quot;治疗波&quot;,
        pid: 4
    },
    {
        id: 10,
        name: &quot;妖术&quot;,
        pid: 4
    },
    {
        id: 11,
        name: &quot;毒蛇守卫&quot;,
        pid: 4
    },
    {
        id: 12,
        name: &quot;无敌&quot;,
        pid: 4
    },
    {
        id: 13,
        name: &quot;1级疾风步&quot;,
        pid: 5
    },
    {
        id: 14,
        name: &quot;2级疾风步&quot;,
        pid: 5
    },
    {
        id: 15,
        name: &quot;3级疾风步&quot;,
        pid: 5
    }
];    
</code></pre>
</li>
<li>
<p>完成以下题目</p>
<ul>
<li>
<p>根据id获取对应的数据</p>
</li>
<li>
<p>根据id获取它的父亲</p>
</li>
<li>
<p>根据id获取它的孩子节点</p>
</li>
<li>
<p>根据id获取它所有的上级节点(父，爷...)</p>
</li>
<li>
<p>根据id获取它所有的下级节点(孩子，孙子...)</p>
</li>
<li>
<p>根据给定的list生成树状结构，类似下图</p>
<figure data-type="image" tabindex="1"><img src="https://qianfengg.github.io/post-images/1583570676094.jpg" alt="" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
<h2 id="答案">答案</h2>
<h3 id="获取自身">获取自身</h3>
<pre><code class="language-js">function getSelf(list, id){
    return list.filter(item =&gt; item.id === id)[0];
}  
</code></pre>
<h3 id="获取父亲">获取父亲</h3>
<pre><code class="language-js">function getParent(list, id){
    let self = getSelf(list, id);
    return getSelf(list, self.pid);
}   
</code></pre>
<h3 id="获取孩子">获取孩子</h3>
<pre><code class="language-js">function getChildren(list, id){
    return list.filter(item =&gt; item.pid === id);
}
</code></pre>
<h3 id="获取上级父亲爷爷">获取上级(父亲，爷爷...)</h3>
<pre><code class="language-js">function getAllParent(list, id){
    let parent = getParent(list, id);
    let result = [];
    while(parent){
        result.unshift(parent);
        parent = getParent(list, parent.id);
    }
    return result;
}    
</code></pre>
<h3 id="获取下级孩子孙子">获取下级(孩子，孙子...)</h3>
<pre><code class="language-js">function getAllChildren(list, id){
    let children = getChildren(list, id);
    let result = [].concat(children);
    children.forEach(child =&gt; {
        result = result.concat(getChildren(list, child.id));
    })
    return result;
}
</code></pre>
<h3 id="列表转树状-递归实现">列表转树状 - 递归实现</h3>
<pre><code class="language-js">function list2Tree(list, pid){
    let len = list.length;
    function loop(pid){
        let res = [];
        for(let i = 0; i &lt; len; i++){
            let item = list[i];
            if(item.pid === pid){
                item.children = loop(item.id);
                res.push(item);
            }
        }
        return res;
    }
    return loop(pid);
} 
</code></pre>
]]></content>
    </entry>
</feed>